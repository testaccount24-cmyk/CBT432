  /* REXX                                                          */
  /*       J C L    A N A L Y S I S                                */

  /*
JCL ELEMENTS CROSS-REFERENCE
----------------------------

PUBLISHED IN XEPHON - MVS UPDATE  (FEB 1997)

AS I RECENTLY HAD TO MANAGE A SMS MIGRATION PROJECT, I HAD TO ADDRESS
SPECIFIC QUESTIONS AS : WHICH JOBS USE A GIVEN FILE ? WHAT PROGRAMS
USED IN THESE JOBS ARE IBM UTILITIES, OR ARE SITE SPECIFIC ? IS THAT
FILE RECREATED EVERY DAY, OR IS IT READ BEFORE BEING REWRITTEN ? (THAT
WAS A BASE FOR DISTINGUISHING TEMPORARY AND PERMANENT FILES).
THE IDEA WAS THEN TO BUILD A LIST OF ALL FILES USED IN DD CARDS. THE
LIST COULD BE FURTHER ANALYSED THROUGH SORTS OR OTHER PROGRAMS.
THE ANALYSIS OF THE JCL CARD IS VERY ROUGH, BUT SHOULD BE CONVENIENT FOR
MOST CASES. NOTE THAT REFER-BACKS ARE SUPPORTED PAR ANALJCL. THE INPUT DATA
COMES FROM IEBPTPCH, THE OUTPUT IS WRITTEN ON SYSTSPRT.
  */


  /*   G E N E R A L      O P T I O N S                            */

  SEL_MBR = ''       /* SELECT ONLY MEMBERS BEGINNING WITH...      */
  SEL_DSN = ''       /* SELECT ONLY DSNAMES BEGINNING WITH...      */
  SUPPORT_REFERBACK = 'Y'   /* SUPPORT  DSN=*.DDN  DSN=*.STEPN.DDN */

  /*   T I T L E    L I N E                                        */

   SAY '--------------  DSNAME  --------------------'   ,
       'JOBNAME ' '-MEMBER-' 'STEPNAME' 'STP' '-PROGRAM'  ,
       '-DDNAME-' 'VOLSER' '--UNIT--' '--- DISP --' ,
       '----- SPACE -----' ,
       'RECFM' 'DSORG' 'LRECL' 'BLKSZ'

  OLD_MBR = ''
  TOTLIN_MBR = 0
  CARD = ''     /* EXTENDED JCL CARD CONTAINS NO DATA FOR THE MOMENT */
  MBR_NB = 0      /* COUNT OF PROCESSED MEMBERS     */

  DO FOREVER
  'EXECIO 1 DISKR JCLIN   (STEM REC.  '    /* READING    JCLIN     */
  IF RC > 0 THEN DO              /* END OF FILE     */
                 CALL END_MBR
                 EXIT
                 END

  SAUT = SUBSTR(REC.1,1,1)

  /*   A NEW MEMBER IS TO BE PROCESSED                               */
  IF SAUT = '1' THEN DO
                     'EXECIO 1 DISKR JCLIN (STEM REC. ' /* NEXT LINE */
                     IF RC > 0 THEN EXIT
                     IF SUBSTR(REC.1,2,13) = 'MEMBER NAME  ' ,
                     THEN  DO
                           MBR_NAME = SUBSTR(REC.1,15,8)
                           /* IF A NEW MEMBER IS ARRIVING ...     */
                           IF MBR_NAME \= OLD_MBR THEN DO
                                CALL END_MBR  /* PROCESS OLD_MBR  */
                                CALL NEW_MBR
                                ITERATE
                                END
                                                  ELSE ITERATE
                           END
                     ELSE  DO
                           SAY '** ERROR, MEMBER NAME WAS EXPECTED'
                           SAY REC.1
                           EXIT
                           END
                     END

  /*   NO MEMBER CHANGE, CONTINUE PROCESSING OF CURRENT MEMBER    */

                           /* ELIMINATE IF MEMBER NOT SELECTED    */
  IF SEL_MBR \= '' & POS(SEL_MBR,MBR_NAME) \= 1 THEN ITERATE


  X = SUBSTR(REC.1,2,72)     /* 71 FIRST BYTES                    */
  TOTLIN_MBR = TOTLIN_MBR + 1

  /*   ANALYZE    STATEMENT                                       */
  IF X ='//' THEN ITERATE   /* END OF JOB */
  IF SUBSTR(X,1,2) \= '//' THEN ITERATE       /* NOT A JCL CARD   */
  IF SUBSTR(X,1,3) = '//*' THEN ITERATE       /* COMMENT CARD     */
  NAME = WORD(X,1)    /* 1ST WORD IS // OR //NAME                 */
  NAME = SUBSTR(NAME,3,LENGTH(NAME)-2)        /* CARD NAME        */

  /*   NEW STATEMENT              (DD EXEC JOB PROC ...)          */
  IF  NAME \= '' THEN DO
        TYPE = WORD(X,2)       /* 2ND WORD : DD EXEC JOB PROC ... */
        CALL END_STAT /* PREVIOUS STATEMENT IN "CARD" ZONE TERMINATED*/
        CARD = WORD(X,3)     /* INITIALIZE "CARD" WITH REMAINING DATA*/
        CALL NEW_STAT
        ITERATE

        END

  /*   STATEMENT WITH NO CARD NAME                                */
  /*   (CONTINUATION, DD WITHOUT DDNAME, ETC.)                    */

  TYPE = WORD(X,2)
  IF  TYPE = 'DD' | TYPE = 'EXEC' | TYPE = 'JOB' ,
                  | TYPE = 'PROC' | TYPE = 'PEND' THEN DO
                  CALL END_STAT
                 CARD = WORD(X,3) /* INIT. "CARD" WITH REMAINING DATA*/
                  IF TYPE = 'DD' THEN          /* DD CONCATENATION */ ,
                                 NAME = OLD_NAME
                  CALL NEW_STAT
                  ITERATE
                  END
  /*                         CONTINUATION        CARD             */
        IF FLAG_CONT = 1 THEN  DO
                               CARD = CARD||WORD(X,2)
                               CALL NEW_STAT
                               END
                         ELSE  DO       /* IGNORE THE CARD */
                               ITERATE
                               END

  END       /* END OF RECORD PROCESSING (DO FOREVER)  */
  EXIT

  /*  MEMBER CALLED OLD_MBR TERMINATED                            */
END_MBR :
  IF TOTLIN_MBR = 0 THEN RETURN
  SAY 'END OF MEMBER' OLD_MBR TOTLIN_MBR 'LINES'
  CALL END_STAT
  TOTLIN_MBR = 0
  RETURN

  /* BEGINNING PROCESSING OF MEMBER "MBR_NAME"                    */
NEW_MBR :
  OLD_MBR = MBR_NAME
  MBR_NB = MBR_NB + 1
  SAY 'MEMBER'  MBR_NAME 'NUMBER' MBR_NB
  CARD = ''
  NAME  = ''
  TYPE  = ''
  STEPNO = 0
  JOB_NAME = ''
  EXEC_NAME = ''
  FLAG_CONT = 0
  RETURN
  EXIT

  /* END OF STATEMENT "CARD", TYPE "OLD_TYPE", NAME "OLD_NAME"     */
  /*                                 IN  PDS MEMBER "OLD_MBR"      */
END_STAT :
  FLAG_CONT = 0
  IF CARD = '' THEN RETURN

  /*  JOB CARD           */

  IF OLD_TYPE = 'JOB'  THEN DO
      JOB_NAME = OLD_NAME
      OLD_NAME = ''
      END

  /*  EXEC CARD          */

  IF OLD_TYPE = 'EXEC'  THEN DO
      EXEC_NAME = OLD_NAME
      OLD_NAME = ''
      PGM_NAME = ''
      PGM_NAME = SCAN_PARM('PGM=',CARD)
      STEPNO = STEPNO + 1
      END

  /*  DD  CARD           */

  IF OLD_TYPE = 'DD'  THEN DO
      DD_NAME = OLD_NAME
  /*      CARD   DD          SEEKING  DISP                      */
      DISP    = SCAN_PARM('DISP=',CARD)
      DISP1   = GIVE_PARM(DISP,1)
      IF  DISP1 = '?' THEN DISP1 = 'NEW'
      DISP2   = GIVE_PARM(DISP,2)
      IF  DISP2 = '?' & DISP1 = 'NEW'    THEN DISP2 = 'DELETE'
      IF  DISP2 = '?' & DISP1 \= 'NEW'   THEN DISP2 = 'KEEP'
      DISP3   = GIVE_PARM(DISP,3)
      IF  DISP3 = '?' & DISP1 = 'NEW' THEN DISP3 = 'DELETE'
  /*      CARD   DD          SEEKING  DSN                       */
      DS_NAME = SCAN_PARM('DSN=',CARD)
      IF DS_NAME = '' THEN ,
                      DS_NAME = SCAN_PARM('DSNAME=',CARD)
      IF DS_NAME  = '' THEN DS_NAME = '?'
  /*      CARD   DD          SEEKING  VOL=SER                   */
      VOL_SER = SCAN_PARM('SER=',CARD,'S')
      IF VOL_SER  = '' THEN VOL_SER = '?'
  /*      CARD   DD          SEEKING  RECFM                     */
      DD_RECFM= SCAN_PARM('RECFM=',CARD,'S')
      IF DD_RECFM = '' THEN DD_RECFM= '?'
  /*      CARD   DD          SEEKING  DSORG                     */
      DD_DSORG= SCAN_PARM('DSORG=',CARD,'S')
      IF DD_DSORG = '' THEN DD_DSORG= '?'
  /*      CARD   DD          SEEKING  LRECL                     */
      DD_LRECL= SCAN_PARM('LRECL=',CARD,'S')
      IF DD_LRECL = '' THEN DD_LRECL= '?'
  /*      CARD   DD          SEEKING  BLKSIZE                   */
      DD_BLK  = SCAN_PARM('BLKSIZE=',CARD,'S')
      IF DD_BLK   = '' THEN DD_BLK  = '?'
  /*      CARD   DD          SEEKING  UNIT                      */
      DD_UNT  = SCAN_PARM('UNIT=',CARD)
      IF DD_UNT   = '' THEN DD_UNT  = '?'
                       ELSE DD_UNT  = GIVE_PARM(DD_UNT,1)
  /*      CARD   DD          SEEKING  SPACE                     */
      SPACE   = SCAN_PARM('SPACE=',CARD)
      SPACE1  = GIVE_PARM(SPACE,1)
      SPACE2  = GIVE_PARM(SPACE,2)

  /*  SUPPORT OF REFERBACK  DSN=*.DDN  DSN=*.STEPN.DDN          */
  /*  PREPARE IN ADVANCE VARIABLES #_DDN OU #_STEPN_DDN         */
  /*    FOR SOLVING FUTURE REFERBACKS                           */
      IF  SUPPORT_REFERBACK = 'Y'   THEN  DO
          VARN = '#_'||DD_NAME
          INTERPRET VARN||'='''||DS_NAME||''''
          IF EXEC_NAME \= '' THEN DO
             VARN = '#_'||EXEC_NAME||'_'||DD_NAME
             INTERPRET VARN||'='''||DS_NAME||''''
             END
  /*  SOLVING THE REFERBACK WITH THE PREPARED VARIABLE          */
          IF  SUBSTR(DS_NAME,1,2) = '*.' THEN DO
              VARN = DS_NAME
              VARN  = TRANSLATE(VARN,'#','*')
              VARN  = TRANSLATE(VARN,'_','.')
              INTERPRET 'TMP='||VARN
              SAY 'SUBSTITUTION:'  DS_NAME 'BECOMES' TMP
              DS_NAME=TMP
              END
          END


  /*  ALL INFORMATIONS ARE BEING PUT OUT                        */

                   /* ELIMINATE IF DSNAME NOT TO BE SELECTED    */
  IF (SEL_DSN \= '' & POS(SEL_DSN,DS_NAME) \= 1) ,
         THEN RETURN

   SAY  SUBSTR(DS_NAME,1,44) ,
        SUBSTR(JOB_NAME,1,8) ,
        SUBSTR(OLD_MBR,1,8) ,
        SUBSTR(EXEC_NAME,1,8) ,
        FORMAT(STEPNO,3)      ,
        SUBSTR(PGM_NAME,1,8) ,
        SUBSTR(DD_NAME,1,8) ,
        SUBSTR(VOL_SER,1,6) ,
        SUBSTR(DD_UNT,1,8) ,
        SUBSTR(DISP1,1,3) ,
        SUBSTR(DISP2,1,3) ,
        SUBSTR(DISP3,1,3) ,
        SUBSTR(SPACE1,1,3) ,
        SUBSTR(SPACE2,1,15) ,
        SUBSTR(DD_RECFM,1,5) ,
        SUBSTR(DD_DSORG,1,5) ,
        SUBSTR(DD_LRECL,1,5) ,
        SUBSTR(DD_BLK,1,5)
  /*                                                            */
      END
  DISP1 = ''
  DISP2 = ''
  DISP3 = ''
  SPACE1 = ''
  SPACE2 = ''
  RETURN

  /* BEGINNING NEW STATEMENT TYPE "TYPE" NAME "NAME"              */
  /* USEFUL INFORMATIONS ARE KEPT IN "CARD" ZONE                  */
NEW_STAT :
  CARD = STRIP(CARD)       /* STRIP LEADING AND TRAILING BLANKS   */
  IF FLAG_CONT = 0 THEN DO
           OLD_TYPE = TYPE
           OLD_NAME = NAME
           END
  IF RIGHT(CARD,1) = ','    /* CONTINUATION EXPECTED   */   ,
     THEN FLAG_CONT = 1
     ELSE FLAG_CONT = 0
  RETURN

  /* SEND BACK KEYWORD VALUE                                       */
  /* VALUE IS RETURNED WITHOUT LEADING NOR TRAILING PARENTHESIS    */
  /* FOR EXAMPLE : SPACE=(TRK,(1,1),RLSE)  ->  TRK,(1,1),RLSE      */

SCAN_PARM: PROCEDURE
  ARG SUB_STR,CARD,TYPE_PARM
      /* 1ST PARAMETER     -> SUBSTRING LIKE 'DSN=': (SCAN CRITERIA)*/
      /* 2ND PARAMETER     -> JCL CARD TO BE SCANNED                */
      /* 3RD PARAMETER     -> ='S' IF SUBPARAMETER                  */
      P= POS(SUB_STR,CARD)   /* GO AFTER KEYWORD VALUE              */
      CHAINE = ''
      IF P=0 THEN RETURN ''     /* NOT FOUND  */

   /* SEEKING DELIMITER FOR END OF PARAMETER                        */

   /* ENDING COMMA COULD BE A DELIMITER                             */
   Q1 = POS(',',SUBSTR(CARD,P+LENGTH(SUB_STR)))
   /* ENDING BLANK COULD BE A DELIMITER                             */
   Q2 = POS(' ',SUBSTR(CARD,P+LENGTH(SUB_STR)))
   /* ENDING PARENTHESIS  COULD BE A DELIMITER                      */
   /* (NOT ALWAYS A DELIMITER FOR KEYWORD VALUE, EX : DSN=X(M)      */
   IF TYPE_PARM = 'S' THEN ,
   Q3 = POS(')',SUBSTR(CARD,P+LENGTH(SUB_STR)))
                      ELSE Q3 = 999999

      /* THE LEAST NOT NULL VALUE GIVES THE REAL DELIMITER          */
   Q = MIN(Q1,Q2,Q3)
   IF Q1 = 0 THEN Q = MIN(Q2,Q3)
   IF Q2 = 0 THEN Q = MIN(Q1,Q3)
   IF Q3 = 0 THEN Q = MIN(Q2,Q1)
   IF Q1=0 & Q3=0 THEN Q = Q2
   IF Q2=0 & Q3=0 THEN Q = Q1
   IF Q1=0 & Q2=0 THEN Q = Q3
   IF Q = 999999 THEN Q=0
   IF Q=0 THEN              /* THE WHOLE CARD IS CONSIDERED */  ,
   CHAINE  =  SUBSTR(CARD,P+LENGTH(SUB_STR))
          ELSE ,
   CHAINE  =  SUBSTR(CARD,P+LENGTH(SUB_STR),Q-1)
   IF LEFT(CHAINE,1) \= '(' THEN RETURN CHAINE

   /* PARAMETER WITH MULTIPLE PARENTHESIS                        */
   CT = 1
   J = P+LENGTH(SUB_STR)+1 /* 1ST CHARACTER AFTER KEYWORD=       */
   DO WHILE CT \= 0
      IF SUBSTR(CARD,J,1) = '(' THEN CT = CT+1
      IF SUBSTR(CARD,J,1) = ')' THEN CT = CT-1
      J = J + 1
      IF J>LENGTH(CARD) THEN LEAVE  /* MAX EXCEEDED - AVOID LOOP */
      END
   IF CT \= 0 THEN DO      /* AS MANY "(" AS ")" ? IF NOT, ERROR */
      SAY '** JCL ERROR WHEN ANALYZING' SUB_STR
      SAY '** CARD IN ERROR : ' CARD
      RETURN ''
      END

   CHAINE = SUBSTR(CARD,P+LENGTH(SUB_STR)+1,J-P-LENGTH(SUB_STR)-2)

  RETURN CHAINE

  /* RETURN VALUE OF A POSITIONAL PARAMETER, ACCORDING TO ITS      */
  /* POSITION : FOR EX., THE 2ND VALUE OF "TRK,(1,1),RLSE" WILL BE */
  /* (1,1)                                                         */

GIVE_PARM: PROCEDURE
  ARG CARD,NB              /* PARAMETER VALUE, PARAMETER POSITION  */
  IF CARD = '' THEN RETURN '?'
  CHAINE = CARD

   /* RETURN "?" FOR MISSING PARAMETERS                          */
   IF SUBSTR(CARD,1,1) = ',' THEN CHAINE = '?'||CARD
   IF SUBSTR(CARD,LENGTH(CARD),1) = ',' THEN CHAINE = CHAINE||'?'
   J = 1
   DO WHILE J < LENGTH(CHAINE)
   IF SUBSTR(CHAINE,J,1) = ',' & ,
      SUBSTR(CHAINE,J+1,1) = ',' THEN ,
         CHAINE = LEFT(CHAINE,J)||'?'|| ,
         SUBSTR(CHAINE,J+1,LENGTH(CHAINE)-J)
      J = J + 1
      END


   /* REPLACE COMMAS BY BLANKS IN ORDER TO SEPARATE WORDS        */
   CT = 0
   J = 1
   DO WHILE J < LENGTH(CHAINE)+1
      IF SUBSTR(CHAINE,J,1) = '(' THEN CT = CT+1
      IF SUBSTR(CHAINE,J,1) = ')' THEN CT = CT-1
      /* REPLACE COMMA SITUATED OUT OF PARENTHESIS          */
      IF SUBSTR(CHAINE,J,1) = ',' & CT = 0 THEN DO
         CHAINE = LEFT(CHAINE,J-1)||' '|| ,
         SUBSTR(CHAINE,J+1,LENGTH(CHAINE)-J)
         END
      J = J + 1
      END
  IF WORDS(CHAINE) < NB THEN RETURN '?'
  RETURN WORD(CHAINE,NB)
